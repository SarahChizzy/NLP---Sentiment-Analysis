# -*- coding: utf-8 -*-
"""Exact Perfect Sentiment Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12PzwfoaINTMIEDFbTh258R6F5lKfERK8
"""

import pandas as pd
import nltk
import string
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

nltk.download('punkt')

data = {'Reviews':["I like red shirts", "Why would I even buy a red shirt", "Red shirts are a turn-off for me", "I love the color red", "There's nothing so special about the red shirt", "I'm highly disappointed. the color does not look like the one in the picture", "It fits perfectly. i should consider buying another one", "The color is nice but doesn't fit my size", "Very uncomfortable. the material is too stretchy", "Nice quality"], 'Sentiment':['positive','negative', 'negative', 'positive', 'negative', 'negative', 'positive', 'negative', 'negative', 'positive']}
df = pd.DataFrame(data)
print(df)

df.head()
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

#preprocessing
def clean_text(text):
    text = text.lower()
    text = ''.join([c for c in text if c not in string.punctuation])
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return ' '.join(words)
df['cleaned_review'] = df['Reviews'].apply(clean_text)
print(df)

X = df['cleaned_review']
y=df['Sentiment']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = LogisticRegression()
model.fit(X_train_vec, y_train)
y_pred = model.predict(X_test_vec)

print(classification_report(y_test, y_pred))

sample_review = ["The shirt is beautiful and comfortable!"]
sample_cleaned = [clean_text(review) for review in sample_review]
sample_vec = vectorizer.transform(sample_cleaned)
prediction = model.predict(sample_vec)
print("Sentiment:", prediction[0])

import streamlit as st
st.title("ðŸ§  Sentiment Analysis App")
st.write("Enter a review and find out whether it's positive or negative!")

user_input = st.text_area("Write your review here:")

if st.button("Analyze"):
    if user_input.strip() == "":
        st.warning("Please enter a review.")
    else:
        cleaned = clean_text(user_input)
        vector = vectorizer.transform([cleaned])
        prediction = model.predict(vector)[0]
        st.success(f"Predicted Sentiment: **{prediction.upper()}**")
